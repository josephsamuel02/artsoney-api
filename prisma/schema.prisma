// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Auth {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  email      String   @unique
  first_name String
  last_name  String
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique
  user_name          String?
  email              String?   @unique
  phone_number       String?
  first_name         String?
  last_name          String?
  middle_name        String?
  date_of_birth      DateTime?
  state_of_residence String?
  profile_img        String?
  profile_poster_img String?
  country            String?
  about              String?
  socials            String?
  profession         String?

  isActive     Boolean?
  authStrategy String?
  interests    String[]
  hubbys       String[]
  Post         Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique @db.ObjectId
  comment Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_name String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @unique @db.ObjectId
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Auth {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  email     String   @unique
  user_name String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique
  user_name     String?
  email         String?   @unique
  phone_number  String?
  first_name    String?
  last_name     String?
  middle_name   String?
  date_of_birth DateTime?
  address       Address?

  profile_img        String?
  profile_poster_img String?

  about      String?
  socials    Socials?
  profession String[]
  following  following[]
  followers  followers[]
  likes      Int?        @default(0)
  interests  String[]
  hubby      String[]
  Post       Post[]
  moodboard  moodboard?

  isActive     Boolean? @default(false)
  suspended    Boolean? @default(false)
  authStrategy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Store     Store?

  Cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String? @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId    String    @unique
  user_name String
  title     String
  image     String?
  likes     Int?
  views     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comment   Comment[]
  User      User      @relation(fields: [userId], references: [userId])
  userId    String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_name String
  image     String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [postId])
  postId    String
  Store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @db.ObjectId
}

model Store {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user_name String
  User      User      @relation(fields: [userId], references: [userId])
  userId    String    @unique
  Comment   Comment[]
  products  product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user_name   String
  userId      String        @unique
  products    CartProduct[]
  total_price Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User[]
}

model product {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  product_id         String
  product_image      String
  product_title      String
  available_quantity Int
  price              Int
  likes              Int
  views              Int
  userId             String
  Store              Store  @relation(fields: [id], references: [id])
  storeId            String @unique
}

type Address {
  country    String
  street     String
  city       String
  state      String
  zip        String
  ip_address String
}

type Socials {
  facebook  String?
  x_social  String?
  instagram String?
  youtube   String?
  tiktok    String?
}

type following {
  user_name String
  userId    String
}

type followers {
  user_name String
  userId    String
}

type CartProduct {
  id                 String
  userId             String
  storeId            String
  product_id         String
  product_image      String
  product_title      String
  price              Int
  quantity           Int
  available_quantity Int
}

type moodboard {
  userId String
  title  String
  images String[]
}
